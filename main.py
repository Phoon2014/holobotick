import telebot
import openpyxl
from telebot import types
excel_file_path = 'hol.xlsx'
workbook = openpyxl.load_workbook(excel_file_path)
sheet = workbook.active
token = '6696612926:AAEYYUvxbvLm4ol9u6fSnaW1nVpyfyMxMBQ'
bot = telebot.TeleBot(token)
user_selections = {}
products = [
    "–ö–ª–∞—Å—Å–∏–∫ (—á–µ—Ä–Ω—ã–π)", "–ó–µ—Ä–æ (–±–µ–ª—ã–π)", "–ë–µ—Å–ø–æ–Ω—Ç–æ–≤—ã–π –ì–µ–π–º–§—É–ª–ª (–°–∏–Ω–∏–π)", "–Ø–≥–æ–¥—ã (–∫—Ä–∞—Å–Ω—ã–π)",
    "–ö–ª–∞—Å—Å–∏–∫ (–∑–µ–ª–µ–Ω—ã–π)", "–ó–µ—Ä–æ –±–µ–ª—ã–π", "–ì–æ–ª—É–±–∏–∫–∞ (—Å–∏–Ω–∏–π)", "–ú–∞–Ω–≥–æ (–∂–µ–ª—Ç—ã–π)", "–ö–æ–∫–æ—Å + —è–≥–æ–¥—ã (–≥–æ–ª—É–±–æ–π)",
    "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π", "–ú–∞–Ω–≥–æ", "–Ø–±–ª–æ–∫–æ –ö–∏–≤–∏", "–ö–ª–∞—Å—Å–∏–∫ —á–µ—Ä–Ω—ã–π", "–ì–æ–ª—É–±–∏–∫–∞ –ì—Ä–∞–Ω–∞—Ç (—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π)",
    "–ú–∞–Ω–≥–æ –õ–∞–π–º (–∑–µ–ª–µ–Ω—ã–π)", "–ê–ø–µ–ª—å—Å–∏–Ω –ú–∞—Ä–∞–∫—É—è", "–≠–∫—Ç–∏–≤", "–ë–∞–±–ª –ì–∞–º", "–ö–æ–∫–æ—Å", "–ú–∞–ª–∏–Ω–∞", "–ú–∞–Ω–≥–æ (—Å–∏–Ω–∏–π)", "–≠–∫—Å—Ç—Ä–∞",
    "–ê–Ω–∞–Ω–∞—Å", "–ê–ø–µ–ª—å—Å–∏–Ω", "–í–æ–¥–∞", "–ó–µ–ª–µ–Ω–∞—è –∫–ª–∞—Å—Å–∏–∫–∞", "–û–±–æ–∂–∞—é –ü–µ—Ä—Å–∏–∫", "–ß–µ—Ä–Ω—ã–π —Å –ª–∏–º–æ–Ω–æ–º", "–ó–µ–º–ª—è–Ω–∏—á–∫–∞ –∏ –∫–ª—é–∫–æ–≤–∫–∞",
    "–ö–æ–ª–∞", "–ö–æ–ª–∞ –ó–µ—Ä–æ", "–ü–µ–ø—Å–∏", "7 UP", "FANTA", "–ë–æ—Ä–∂–æ–º–∏", "–°–Ω–∏–∫–µ—Ä—Å", "–ú–∞—Ä—Å", "–¢–≤–∏–∫—Å", "–ë–∞—É–Ω—Ç–∏", "–ú–∞—Ä—à–º–µ–ª–æ—É",
    "–ö–æ—Ñ–µ –ì—É–∞—Ä–∞–Ω–∞", "–û—Ä–µ—Ö–∏ –ú–∞–Ω–≥–æ", "–ü–µ—á–µ–Ω—å–µ"
]
unique_products = [f"{product} ({index})" for index, product in enumerate(products, start=1)]
print(unique_products)
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    if message.text == '/start':
        bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –Ø —á–∞—Ç-–±–æ—Ç üòá –ß—Ç–æ —Ç—ã —Å—ä–µ–ª —Å–µ–≥–æ–¥–Ω—è?", reply_markup=main_menu_markup)
    elif message.text == '/help':
        bot.reply_to(message, "–ü–æ–º–æ—â—å –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏...")
def hide_keyboard(message):
    markup = types.ReplyKeyboardRemove(selective=False)
    bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=markup)
# –°–ª–æ–≤–∞—Ä—å —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è–º–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–≤
product_aliases = {
    "–ó–µ–ª–µ–Ω–∞—è –∫–ª–∞—Å—Å–∏–∫–∞": "–ó–µ–ª–µ–Ω—ã–π –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π",
    "–û–±–æ–∂–∞—é –ü–µ—Ä—Å–∏–∫": "–ü–µ—Ä—Å–∏–∫",
    "–ß–µ—Ä–Ω—ã–π —Å –ª–∏–º–æ–Ω–æ–º": "–õ–∏–º–æ–Ω",
    "–ó–µ–º–ª—è–Ω–∏—á–∫–∞ –∏ –∫–ª—é–∫–æ–≤–∫–∞": "–ó–µ–ª–µ–Ω—ã–π —Å —è–≥–æ–¥–∞–º–∏",
    # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏ –∏—Ö –ø—Å–µ–≤–¥–æ–Ω–∏–º—ã
}


def get_user_history(user_row):
    username = sheet.cell(row=user_row, column=1).value
    history = {"–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏": {}, "LIPTON": {}, "–õ–∏–º–æ–Ω–∞–¥": {}, "–°–Ω–µ–∫–∏": {}, "–î—Ä—É–≥–∏–µ": {}}

    for col in range(2, sheet.max_column + 1):
        product_count = sheet.cell(row=user_row, column=col).value
        if product_count:
            product_name = products[col - 2]

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Å–µ–≤–¥–æ–Ω–∏–º, –µ—Å–ª–∏ –æ–Ω –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
            product_alias = product_aliases.get(product_name, product_name)

            category = categorize_product(product_name)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤ –∏—Å—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –Ω–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º
            if category not in history:
                history[category] = {}

            history[category][product_alias] = product_count

    return history


def categorize_product(product_name):
    energy_categories = {
        "–ê–¥—Ä–µ–Ω–∞–ª–∏–Ω": ["–ö–ª–∞—Å—Å–∏–∫ (—á–µ—Ä–Ω—ã–π)", "–ó–µ—Ä–æ (–±–µ–ª—ã–π)", "–ë–µ—Å–ø–æ–Ω—Ç–æ–≤—ã–π –ì–µ–π–º–§—É–ª–ª (–°–∏–Ω–∏–π)", "–Ø–≥–æ–¥—ã (–∫—Ä–∞—Å–Ω—ã–π)"],
        "LIT Energy": ["–ö–ª–∞—Å—Å–∏–∫ (–∑–µ–ª–µ–Ω—ã–π)", "–ó–µ—Ä–æ –±–µ–ª—ã–π", "–ì–æ–ª—É–±–∏–∫–∞ (—Å–∏–Ω–∏–π)", "–ú–∞–Ω–≥–æ (–∂–µ–ª—Ç—ã–π)", "–ö–æ–∫–æ—Å + —è–≥–æ–¥—ã (–≥–æ–ª—É–±–æ–π)"],
        "CYBERWATER": ["–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π", "–ú–∞–Ω–≥–æ", "–Ø–±–ª–æ–∫–æ –ö–∏–≤–∏"],
        "VOLT": ["–ö–ª–∞—Å—Å–∏–∫ —á–µ—Ä–Ω—ã–π", "–ú–∞–Ω–≥–æ –õ–∞–π–º (–∑–µ–ª–µ–Ω—ã–π)", "–ê–ø–µ–ª—å—Å–∏–Ω –ú–∞—Ä–∞–∫—É—è", "–ì–æ–ª—É–±–∏–∫–∞ –ì—Ä–∞–Ω–∞—Ç (—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π)"],
        "TORNADO": ["–≠–∫—Ç–∏–≤", "–ë–∞–±–ª –ì–∞–º", "–ö–æ–∫–æ—Å", "–ú–∞–ª–∏–Ω–∞"],
        "GORILLA": ["–ú–∞–Ω–≥–æ (—Å–∏–Ω–∏–π)", "–≠–∫—Å—Ç—Ä–∞", "–ê–Ω–∞–Ω–∞—Å", "–ê–ø–µ–ª—å—Å–∏–Ω"]
    }

    lipton_categories = {
        "LIPTON": ["–ó–µ–ª–µ–Ω–∞—è –∫–ª–∞—Å—Å–∏–∫–∞", "–û–±–æ–∂–∞—é –ü–µ—Ä—Å–∏–∫", "–ß–µ—Ä–Ω—ã–π —Å –ª–∏–º–æ–Ω–æ–º", "–ó–µ–º–ª—è–Ω–∏—á–∫–∞ –∏ –∫–ª—é–∫–æ–≤–∫–∞"]
    }

    lemonade_categories = {
        "–õ–∏–º–æ–Ω–∞–¥": ["–ö–æ–ª–∞", "–ö–æ–ª–∞ –ó–µ—Ä–æ", "–ü–µ–ø—Å–∏", "7 UP", "FANTA"]
    }

    snack_categories = {
        "–°–Ω–µ–∫–∏": ["–°–Ω–∏–∫–µ—Ä—Å", "–ú–∞—Ä—Å", "–¢–≤–∏–∫—Å", "–ë–∞—É–Ω—Ç–∏", "–ú–∞—Ä—à–º–µ–ª–æ—É", "–ö–æ—Ñ–µ –ì—É–∞—Ä–∞–Ω–∞", "–û—Ä–µ—Ö–∏ –ú–∞–Ω–≥–æ", "–ü–µ—á–µ–Ω—å–µ"]
    }

    for category, products_in_category in energy_categories.items():
        if product_name in products_in_category:
            return category

    for category, products_in_category in lipton_categories.items():
        if product_name in products_in_category:
            return category

    for category, products_in_category in lemonade_categories.items():
        if product_name in products_in_category:
            return category

    for category, products_in_category in snack_categories.items():
        if product_name in products_in_category:
            return category

    return "–î—Ä—É–≥–∏–µ"


category_aliases = {
    "–ó–µ–ª–µ–Ω–∞—è –∫–ª–∞—Å—Å–∏–∫–∞": "–ó–µ–ª–µ–Ω—ã–π –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π",
    "–û–±–æ–∂–∞—é –ü–µ—Ä—Å–∏–∫": "–ü–µ—Ä—Å–∏–∫",
    "–ß–µ—Ä–Ω—ã–π —Å –ª–∏–º–æ–Ω–æ–º": "–ß–µ—Ä–Ω—ã–π —Å –ª–∏–º–æ–Ω–æ–º",
    "–ó–µ–º–ª—è–Ω–∏—á–∫–∞ –∏ –∫–ª—é–∫–æ–≤–∫–∞": "–ó–µ–ª–µ–Ω—ã–π —Å —è–≥–æ–¥–∞–º–∏",
}

@bot.message_handler(func=lambda message: message.text == "–ò—Å—Ç–æ—Ä–∏—è", content_types=['text'])
def send_user_history(message):
    username = message.from_user.username
    user_row = find_user_row(username)

    if user_row is not None:
        user_history = get_user_history(user_row)
        formatted_history = format_user_history(user_history)
        bot.reply_to(message, f"–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:\n\n{formatted_history}")
    else:
        bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")

    send_welcome_with_menu(message)


def format_user_history(user_history):
    formatted_history = []
    for category, products_in_category in user_history.items():
        for product, count in products_in_category.items():
            formatted_history.append(f"{category}: {product} ({count})")

    return '\n'.join(formatted_history)
@bot.message_handler(func=lambda message: message.text == "–ò—Å—Ç–æ—Ä–∏—è", content_types=['text'])
def send_user_history(message):
    username = message.from_user.username
    user_row = find_user_row(username)

    if user_row is not None:
        user_history = get_user_history(user_row)
        bot.reply_to(message, f"–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:\n\n{user_history}")
    else:
        bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")


    send_welcome(message)

main_menu_markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
main_menu_markup.add(types.KeyboardButton("–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏"),
                     types.KeyboardButton("–í–æ–¥–∞, —á–∞–π –∏ –ª–∏–º–æ–Ω–∞–¥"),
                     types.KeyboardButton("–ë–∞—Ç–æ–Ω—á–∏–∫–∏ –∏ —Å–Ω–µ–∫–∏"),
                     types.KeyboardButton("–ò—Å—Ç–æ—Ä–∏—è"))

energy_menu_markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
energy_menu_markup.add(types.KeyboardButton("–ê–¥—Ä–µ–Ω–∞–ª–∏–Ω"),
                       types.KeyboardButton("–õ–ò–¢ –≠–Ω–µ—Ä–¥–∂–∏"),
                       types.KeyboardButton("CYBERWATER"),
                       types.KeyboardButton("VOLT"),
                       types.KeyboardButton("TORNADO"),
                       types.KeyboardButton("GORILLA"))

adrenalin_menu_markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
adrenalin_menu_markup.add(types.KeyboardButton("–ö–ª–∞—Å—Å–∏–∫ (—á–µ—Ä–Ω—ã–π)"),
                          types.KeyboardButton("–ó–µ—Ä–æ (–±–µ–ª—ã–π)"),
                          types.KeyboardButton("–ë–µ—Å–ø–æ–Ω—Ç–æ–≤—ã–π –ì–µ–π–º–§—É–ª–ª (–°–∏–Ω–∏–π)"),
                          types.KeyboardButton("–Ø–≥–æ–¥—ã (–∫—Ä–∞—Å–Ω—ã–π)"))

lit_energy_menu_markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
lit_energy_menu_markup.add(types.KeyboardButton("–ö–ª–∞—Å—Å–∏–∫ (–∑–µ–ª–µ–Ω—ã–π)"),
                          types.KeyboardButton("–ó–µ—Ä–æ –±–µ–ª—ã–π"),
                          types.KeyboardButton("–ì–æ–ª—É–±–∏–∫–∞ (—Å–∏–Ω–∏–π)"),
                          types.KeyboardButton("–ú–∞–Ω–≥–æ (–∂–µ–ª—Ç—ã–π)"),
                          types.KeyboardButton("–ö–æ–∫–æ—Å + —è–≥–æ–¥—ã (–≥–æ–ª—É–±–æ–π)"))

cyberwater_menu_markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
cyberwater_menu_markup.add(types.KeyboardButton("–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π"),
                           types.KeyboardButton("–ú–∞–Ω–≥–æ"),
                           types.KeyboardButton("–Ø–±–ª–æ–∫–æ –ö–∏–≤–∏"))

volt_menu_markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
volt_menu_markup.add(types.KeyboardButton("–ö–ª–∞—Å—Å–∏–∫ —á–µ—Ä–Ω—ã–π"),
                    types.KeyboardButton("–ú–∞–Ω–≥–æ –õ–∞–π–º (–∑–µ–ª–µ–Ω—ã–π)"),
                    types.KeyboardButton("–ê–ø–µ–ª—å—Å–∏–Ω –ú–∞—Ä–∞–∫—É—è"),
                    types.KeyboardButton("–ì–æ–ª—É–±–∏–∫–∞ –ì—Ä–∞–Ω–∞—Ç (—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π)"))

tornado_menu_markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
tornado_menu_markup.add(types.KeyboardButton("–≠–∫—Ç–∏–≤"),
                       types.KeyboardButton("–ë–∞–±–ª –ì–∞–º"),
                       types.KeyboardButton("–ö–æ–∫–æ—Å"),
                       types.KeyboardButton("–ú–∞–ª–∏–Ω–∞"))

gorilla_menu_markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
gorilla_menu_markup.add(types.KeyboardButton("–ú–∞–Ω–≥–æ (—Å–∏–Ω–∏–π)"),
                       types.KeyboardButton("–≠–∫—Å—Ç—Ä–∞"),
                       types.KeyboardButton("–ê–Ω–∞–Ω–∞—Å"),
                       types.KeyboardButton("–ê–ø–µ–ª—å—Å–∏–Ω"))

lipton_menu_markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
lipton_menu_markup.add(types.KeyboardButton("–ó–µ–ª–µ–Ω–∞—è –∫–ª–∞—Å—Å–∏–∫–∞"),
                      types.KeyboardButton("–û–±–æ–∂–∞—é –ü–µ—Ä—Å–∏–∫"),
                      types.KeyboardButton("–ß–µ—Ä–Ω—ã–π —Å –ª–∏–º–æ–Ω–æ–º"),
                      types.KeyboardButton("–ó–µ–º–ª—è–Ω–∏—á–∫–∞ –∏ –∫–ª—é–∫–æ–≤–∫–∞"))

lemonade_menu_markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
lemonade_menu_markup.add(types.KeyboardButton("–ö–æ–ª–∞"),
                        types.KeyboardButton("–ö–æ–ª–∞ –ó–µ—Ä–æ"),
                        types.KeyboardButton("–ü–µ–ø—Å–∏"),
                        types.KeyboardButton("7 UP"),
                        types.KeyboardButton("FANTA"))

water_tea_lemonade_menu_markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
water_tea_lemonade_menu_markup.add(types.KeyboardButton("–í–æ–¥–∞"),
                                   types.KeyboardButton("–ë–æ—Ä–∂–æ–º–∏"),
                                   types.KeyboardButton("–ß–∞–π LIPTON"),
                                   types.KeyboardButton("–õ–ò–ú–û–ù–ê–î"))

snacks_menu_markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
snacks_menu_markup.add(types.KeyboardButton("–°–Ω–∏–∫–µ—Ä—Å"), types.KeyboardButton("–ú–∞—Ä—Å"),
                       types.KeyboardButton("–¢–≤–∏–∫—Å"), types.KeyboardButton("–ë–∞—É–Ω—Ç–∏"),
                       types.KeyboardButton("–ú–∞—Ä—à–º–µ–ª–æ—É"),
                       types.KeyboardButton("–ö–æ—Ñ–µ –ì—É–∞—Ä–∞–Ω–∞",),
                       types.KeyboardButton("–û—Ä–µ—Ö–∏ –ú–∞–Ω–≥–æ"),
                       types.KeyboardButton("–ü–µ—á–µ–Ω—å–µ"))

@bot.message_handler(func=lambda message: message.text == "–ë–∞—Ç–æ–Ω—á–∏–∫–∏ –∏ —Å–Ω–µ–∫–∏", content_types=['text'])
def send_snacks_menu(message):
    bot.reply_to(message, "–ß—Ç–æ —Å—Ö–æ–º—è—á–∏–ª, –∞?", reply_markup=snacks_menu_markup)

@bot.message_handler(func=lambda message: message.text == "–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏")
def send_energy_menu(message):
    bot.reply_to(message, "–ß—Ç–æ –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –±–∏—Ç—å—Å—è —Ç–≤–æ–µ —Å–µ—Ä–¥—Ü–µ —á–∞—â–µ?", reply_markup=energy_menu_markup)

@bot.message_handler(func=lambda message: message.text == "–í–æ–¥–∞, —á–∞–π –∏ –ª–∏–º–æ–Ω–∞–¥", content_types=['text'])
def send_water_tea_lemonade_menu(message):
    bot.reply_to(message, "–ß–µ–º —Ç—ã –æ—Å–≤–µ–∂–∏–ª—Å—è, –ø—Ä–∏—è—Ç–µ–ª—å?", reply_markup=water_tea_lemonade_menu_markup)

@bot.message_handler(func=lambda message: message.text in ["–í–æ–¥–∞", "–ë–æ—Ä–∂–æ–º–∏"], content_types=['text'])
def handle_water_borjomi_selection(message):
    process_product_selection(message)

@bot.message_handler(func=lambda message: message.text == "–ß–∞–π LIPTON", content_types=['text'])
def send_lipton_menu(message):
    bot.reply_to(message, "–ö–∞–∫–æ–π —á–∞–π —Ç—ã –ª—é–±–∏—à—å –ø–∏—Ç—å —Å –±–∞–±—É–ª–µ–π?", reply_markup=lipton_menu_markup)

@bot.message_handler(func=lambda message: message.text == "–õ–ò–ú–û–ù–ê–î", content_types=['text'])
def send_lemonade_menu(message):
    bot.reply_to(message, "–ß—Ç–æ –Ω–µ –¥–∞–ª–æ —Ç–µ–±–µ —É–º–µ—Ä–µ—Ç—å –æ—Ç –∂–∞–∂–¥—ã?", reply_markup=lemonade_menu_markup)

@bot.message_handler(func=lambda message: message.text in [
    "–ó–µ–ª–µ–Ω–∞—è –∫–ª–∞—Å—Å–∏–∫–∞", "–û–±–æ–∂–∞—é –ü–µ—Ä—Å–∏–∫",
    "–ß–µ—Ä–Ω—ã–π —Å –ª–∏–º–æ–Ω–æ–º", "–ó–µ–º–ª—è–Ω–∏—á–∫–∞ –∏ –∫–ª—é–∫–æ–≤–∫–∞"
], content_types=['text'])
def handle_lipton_flavor(message):
    process_product_selection(message)

@bot.message_handler(func=lambda message: message.text in [
    "–°–Ω–∏–∫–µ—Ä—Å", "–ú–∞—Ä—Å", "–¢–≤–∏–∫—Å", "–ë–∞—É–Ω—Ç–∏", "–ú–∞—Ä—à–º–µ–ª–æ—É",
    "–ö–æ—Ñ–µ –ì—É–∞—Ä–∞–Ω–∞", "–û—Ä–µ—Ö–∏ –ú–∞–Ω–≥–æ", "–ü–µ—á–µ–Ω—å–µ"
])
def handle_snack_selection(message):
    process_product_selection(message)

@bot.message_handler(func=lambda message: message.text in [
    "–ö–æ–ª–∞", "–ö–æ–ª–∞ –ó–µ—Ä–æ", "–ü–µ–ø—Å–∏", "7 UP", "FANTA"
], content_types=['text'])
def handle_lemonade_flavor(message):
    process_product_selection(message)

@bot.message_handler(func=lambda message: message.text == "–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏", content_types=['text'])
def send_energy_menu(message):
    bot.reply_to(message, "–ß—Ç–æ –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –±–∏—Ç—å—Å—è —Ç–≤–æ–µ —Å–µ—Ä–¥—Ü–µ —á–∞—â–µ?", reply_markup=energy_menu_markup)

@bot.message_handler(func=lambda message: message.text == "–ê–¥—Ä–µ–Ω–∞–ª–∏–Ω", content_types=['text'])
def send_adrenalin_menu(message):
    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∫—É—Å –ê–¥—Ä–µ–Ω–∞–ª–∏–Ω–∞:", reply_markup=adrenalin_menu_markup)

@bot.message_handler(func=lambda message: message.text == "–õ–ò–¢ –≠–Ω–µ—Ä–¥–∂–∏", content_types=['text'])
def send_lit_energy_menu(message):
    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∫—É—Å LIT Energy:", reply_markup=lit_energy_menu_markup)

@bot.message_handler(func=lambda message: message.text == "CYBERWATER", content_types=['text'])
def send_cyberwater_menu(message):
    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∫—É—Å CYBERWATER:", reply_markup=cyberwater_menu_markup)

@bot.message_handler(func=lambda message: message.text == "VOLT", content_types=['text'])
def send_volt_menu(message):
    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∫—É—Å VOLT:", reply_markup=volt_menu_markup)

@bot.message_handler(func=lambda message: message.text == "TORNADO", content_types=['text'])
def send_tornado_menu(message):
    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∫—É—Å TORNADO:", reply_markup=tornado_menu_markup)

@bot.message_handler(func=lambda message: message.text == "GORILLA", content_types=['text'])
def send_gorilla_menu(message):
    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∫—É—Å GORILLA:", reply_markup=gorilla_menu_markup)

@bot.message_handler(func=lambda message: message.text in [
    "–ö–ª–∞—Å—Å–∏–∫ (—á–µ—Ä–Ω—ã–π)", "–ó–µ—Ä–æ (–±–µ–ª—ã–π)",
    "–ë–µ—Å–ø–æ–Ω—Ç–æ–≤—ã–π –ì–µ–π–º–§—É–ª–ª (–°–∏–Ω–∏–π)", "–Ø–≥–æ–¥—ã (–∫—Ä–∞—Å–Ω—ã–π)"
], content_types=['text'])
def handle_adrenalin_flavor(message):
    process_product_selection(message)

@bot.message_handler(func=lambda message: message.text in [
    "–ö–ª–∞—Å—Å–∏–∫ (–∑–µ–ª–µ–Ω—ã–π)", "–ó–µ—Ä–æ –±–µ–ª—ã–π",
    "–ì–æ–ª—É–±–∏–∫–∞ (—Å–∏–Ω–∏–π)", "–ú–∞–Ω–≥–æ (–∂–µ–ª—Ç—ã–π)",
    "–ö–æ–∫–æ—Å + —è–≥–æ–¥—ã (–≥–æ–ª—É–±–æ–π)"
], content_types=['text'])
def handle_lit_energy_flavor(message):
    process_product_selection(message)

@bot.message_handler(func=lambda message: message.text in [
    "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π", "–ú–∞–Ω–≥–æ", "–Ø–±–ª–æ–∫–æ –ö–∏–≤–∏"
], content_types=['text'])
def handle_cyberwater_flavor(message):
    process_product_selection(message)

@bot.message_handler(func=lambda message: message.text in [
    "–ö–ª–∞—Å—Å–∏–∫ —á–µ—Ä–Ω—ã–π", "–ú–∞–Ω–≥–æ –õ–∞–π–º (–∑–µ–ª–µ–Ω—ã–π)",
    "–ê–ø–µ–ª—å—Å–∏–Ω –ú–∞—Ä–∞–∫—É—è", "–ì–æ–ª—É–±–∏–∫–∞ –ì—Ä–∞–Ω–∞—Ç (—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π)"
], content_types=['text'])
def handle_volt_flavor(message):
    process_product_selection(message)

@bot.message_handler(func=lambda message: message.text in [
    "–≠–∫—Ç–∏–≤", "–ë–∞–±–ª –ì–∞–º", "–ö–æ–∫–æ—Å", "–ú–∞–ª–∏–Ω–∞"
], content_types=['text'])
def handle_tornado_flavor(message):
    process_product_selection(message)

@bot.message_handler(func=lambda message: message.text in [
    "–ú–∞–Ω–≥–æ (—Å–∏–Ω–∏–π)", "–≠–∫—Å—Ç—Ä–∞", "–ê–Ω–∞–Ω–∞—Å", "–ê–ø–µ–ª—å—Å–∏–Ω"
], content_types=['text'])
def handle_gorilla_flavor(message):
    process_product_selection(message)

@bot.message_handler(func=lambda message: message.text in [
    "–ó–µ–ª–µ–Ω–∞—è –∫–ª–∞—Å—Å–∏–∫–∞", "–û–±–æ–∂–∞—é –ü–µ—Ä—Å–∏–∫",
    "–ß–µ—Ä–Ω—ã–π —Å –ª–∏–º–æ–Ω–æ–º", "–ó–µ–º–ª—è–Ω–∏—á–∫–∞ –∏ –∫–ª—é–∫–æ–≤–∫–∞"
], content_types=['text'])
def handle_lipton_flavor(message):
    process_product_selection(message)

@bot.message_handler(func=lambda message: message.text in [
    "–ö–æ–ª–∞", "–ö–æ–ª–∞ –ó–µ—Ä–æ", "–ü–µ–ø—Å–∏", "7 UP", "FANTA"
], content_types=['text'])
def handle_lemonade_flavor(message):
    process_product_selection(message)

@bot.message_handler(func=lambda message: message.text in [
    "–°–Ω–∏–∫–µ—Ä—Å", "–ú–∞—Ä—Å", "–¢–≤–∏–∫—Å", "–ë–∞—É–Ω—Ç–∏", "–ú–∞—Ä—à–º–µ–ª–æ—É",
    "–ö–æ—Ñ–µ –ì—É–∞—Ä–∞–Ω–∞", "–û—Ä–µ—Ö–∏ –ú–∞–Ω–≥–æ", "–ü–µ—á–µ–Ω—å–µ"
], content_types=['text'])
def handle_snack_selection(message):
    process_product_selection(message)
def find_user_row(username):
    for row in range(2, sheet.max_row + 1):  # –ù–∞—á–∏–Ω–∞–µ–º —Å 2 —Å—Ç—Ä–æ–∫–∏, —Ç–∞–∫ –∫–∞–∫ 1-—è —Å—Ç—Ä–æ–∫–∞ - –∑–∞–≥–æ–ª–æ–≤–æ–∫
        if sheet.cell(row=row, column=1).value == username:
            return row
    return None

def process_product_selection(message):
    product = message.text
    username = message.from_user.username

    user_row = find_user_row(username)

    if user_row is not None:
        product_col = products.index(product) + 2  # products –≤–º–µ—Å—Ç–æ unique_products

        sheet.cell(row=user_row, column=product_col, value=sheet.cell(row=user_row, column=product_col).value + 1)

        workbook.save(excel_file_path)

        bot.reply_to(message, f"–ü—Ä–æ–¥—É–∫—Ç {product} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
    else:
        bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")

    send_welcome_with_menu(message)
def send_welcome_with_menu(message):
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –Ø —á–∞—Ç-–±–æ—Ç üòá –ß—Ç–æ —Ç—ã —Å—ä–µ–ª —Å–µ–≥–æ–¥–Ω—è?", reply_markup=main_menu_markup)

if __name__ == '__main__':
    bot.polling(none_stop=True)

